<?php

/**
 * @file
 * Themes and preprocessors for the paragraphs page title module.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupRelationship;
use Drupal\node\Entity\Node;
use Drupal\path_alias\Entity\PathAlias;
use Drupal\subgroup\MalformedLeafException;

/**
 * Implements hook_theme().
 */
function hr_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'river' => [
      'template' => 'river',
      'variables' => [
        'service' => NULL,
        'service_url' => NULL,
        'data' => [],
        'total' => [],
        'facets' => [],
        'active_facets' => [],
        'pager' => NULL,
        'group' => NULL,
        'view_all' => NULL,
        'set_name' => NULL,
      ],
    ],
    'hr_paragraphs_rw_list' => [
      'template' => 'hr-paragraphs-rw-list',
      'variables' => [
        'data' => [],
        'total' => [],
        'view_all' => NULL,
      ],
    ],
    'hr_paragraphs_rw_key_figures' => [
      'template' => 'hr-paragraphs-rw-key-figures',
      'variables' => [
        'country_iso' => NULL,
        'country_name' => NULL,
        'data' => [],
        'total' => [],
        'view_all' => NULL,
      ],
    ],
    'upcoming_events' => [
      'template' => 'upcoming-events',
      'variables' => [
        'events' => [],
        'read_more' => NULL,
      ],
    ],
    'hr_paragraphs_rss_feed' => [
      'template' => 'hr-paragraphs-rss-feed',
      'variables' => [
        'items' => [],
        'options' => [],
        'read_more' => NULL,
      ],
    ],
    'hr_paragraphs_iframe' => [
      'template' => 'hr-paragraphs-iframe',
      'variables' => [
        'embed_url' => NULL,
        'width' => NULL,
        'height' => NULL,
        'ratio' => NULL,
      ],
    ],
    'hr_paragraphs_iframe_tableau' => [
      'template' => 'hr-paragraphs-iframe-tableau',
      'variables' => [
        'embed_url' => NULL,
        'width' => NULL,
        'height' => NULL,
        'ratio' => NULL,
      ],
    ],
    'hr_paragraphs_iframe_powerbi' => [
      'template' => 'hr-paragraphs-iframe-powerbi',
      'variables' => [
        'embed_url' => NULL,
        'width' => NULL,
        'height' => NULL,
        'ratio' => NULL,
      ],
    ],
    'group_children' => [
      'template' => 'group-children',
      'variables' => [
        'children' => [],
      ],
    ],
    'group_nodes' => [
      'template' => 'group-nodes',
      'variables' => [
        'nodes' => [],
      ],
    ],
    'fullcalendar_link' => [
      'template' => 'fullcalendar-link',
      'variables' => [
        'calendar_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'operation') {
    return;
  }

  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/group/' . $entity->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $group_alias = $path_alias_manager->getAliasByPath($source);

  // Add alias if needed.
  if ($group_alias === $source) {
    $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());
    $new_alias = '/' . $page_title;

    /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
    $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
    $alias_uniquifier->uniquify($new_alias, $source, $langcode);

    if ($source !== $new_alias) {
      $path_alias = PathAlias::create([
        'path' => $source,
        'alias' => $new_alias,
      ]);

      $path_alias->save();
    }
  }

  // Add aliases for tabs.
  hr_paragraphs_add_aliases_for_tabs($entity);
}

/**
 * Add Url aliases for all tabs.
 */
function hr_paragraphs_add_aliases_for_tabs(Group $group) {
  $source = '/group/' . $group->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $group_alias = $path_alias_manager->getAliasByPath($source);

  // Add aliases for tabs.
  $tabs = [
    'events',
    'contacts',
    'pages',
    'reports',
    'maps',
    'data',
    'assessments',
  ];

  foreach ($tabs as $tab) {
    $source = '/group/' . $group->id() . '/' . $tab;
    $tab_alias = $group_alias . '/' . $tab;

    $existing_alias = $path_alias_manager->getAliasByPath($source);
    // Skip if an alias is already set.
    if ($existing_alias !== $source) {
      // Check if path do match.
      $group_parts = explode('/', $group_alias);
      $tab_parts = explode('/', $existing_alias);
      $match = TRUE;

      foreach ($group_parts as $index => $group_part) {
        if ($group_part != $tab_parts[$index]) {
          $match = FALSE;
        }
      }

      // Skip if parts do match.
      if ($match) {
        continue;
      }
    }

    if ($source !== $tab_alias) {
      $path_alias = PathAlias::create([
        'path' => $source,
        'alias' => $tab_alias,
      ]);

      $path_alias->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hr_paragraphs_group_update(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\Group $entity */
  if ($entity->bundle() == 'operation') {
    return hr_paragraphs_group_insert($entity);
  }

  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/group/' . $entity->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $group_alias = $path_alias_manager->getAliasByPath($source);

  // Add alias if needed.
  if ($group_alias === $source) {
    // Get parent alias.
    if ($entity->hasField('subgroup_tree') && !$entity->subgroup_tree->isEmpty()) {
      $subgroup = $entity;
      $group = Group::load($entity->subgroup_tree->value);

      $path_alias_manager = \Drupal::service('path_alias.manager');

      $group_alias = $path_alias_manager->getAliasByPath('/group/' . $group->id());
      $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());
      $new_alias = $group_alias . '/' . $page_title;

      $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
      $source = '/group/' . $subgroup->id();

      /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
      $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
      $alias_uniquifier->uniquify($new_alias, $source, $langcode);

      if ($source !== $new_alias) {
        $path_alias = PathAlias::create([
          'path' => $source,
          'alias' => $new_alias,
        ]);

        $path_alias->save();
      }
    }
  }

  // Add aliases for tabs.
  hr_paragraphs_add_aliases_for_tabs($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hr_paragraphs_node_update(EntityInterface $entity) {
  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/node/' . $entity->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $node_alias = $path_alias_manager->getAliasByPath($source);

  // Skip if an alias is already set.
  if ($node_alias !== $source) {
    return;
  }

  $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());

  $group_relationship_array = GroupRelationship::loadByEntity($entity);
  $group_relationship = reset($group_relationship_array);
  if ($group_relationship) {
    $group = $group_relationship->getGroup();
    $group_alias = $path_alias_manager->getAliasByPath('/group/' . $group->id());

    // Make sure group has a proper alias.
    if ($group_alias == '/group/' . $group->id()) {
      return;
    }

    $new_alias = $group_alias . '/' . $page_title;

    /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
    $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
    $alias_uniquifier->uniquify($new_alias, $source, $langcode);

    if ($source !== $new_alias) {
      $path_alias = PathAlias::create([
        'path' => $source,
        'alias' => $new_alias,
      ]);

      $path_alias->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_relationship_insert(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\GroupRelationship $entity */
  $plugin_id = $entity->getRelationshipType()->getPluginId();

  if ($plugin_id === 'group_node:page') {
    return hr_paragraphs_group_relationship_alias($entity);
  }

  if ($plugin_id === 'subgroup:cluster') {
    return hr_paragraphs_group_subgroup_alias($entity);
  }

  if ($plugin_id === 'group_membership') {
    return hr_paragraphs_group_add_member($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_add_member(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\GroupRelationship $entity */
  $group = $entity->getGroup();

  /** @var \Drupal\user\Entity\User $member */
  $member = $entity->getEntity();

  // Skip UID 0 and 1.
  if ($member->id() <= 1) {
    return;
  }

  \Drupal::logger('hr_members')->info('@member (@uid) added to @group (@gid)', [
    '@member' => $member->getAccountName(),
    '@uid' => $member->id(),
    '@group' => $group->label(),
    '@gid' => $group->id(),
  ]);

  if ($member->isBlocked()) {
    $member->activate();
    $member->save();

    \Drupal::logger('hr_members')->info('@member (@uid) account automatically unblocked', [
      '@member' => $member->getAccountName(),
      '@uid' => $member->id(),
    ]);
  }
  else {
    // Save member so manager_for gets updated.
    // @see hr_paragraphs_user_presave()
    $member->save();
  }

  // Add user to the operation.
  if ($group->bundle() == 'cluster' && $group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
    $operation = Group::load($group->subgroup_tree->value);
    if (!$operation->getMember($member)) {
      $operation->addMember($member);
    }
  }

}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_subgroup_alias(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\GroupRelationship $entity */
  $plugin_id = $entity->getRelationshipType()->getPluginId();
  if ($plugin_id != 'subgroup:cluster') {
    return;
  }

  $subgroup = $entity->getEntity();
  $group = $entity->getGroup();

  $path_alias_manager = \Drupal::service('path_alias.manager');

  $group_alias = $path_alias_manager->getAliasByPath('/group/' . $group->id());
  $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());
  $new_alias = $group_alias . '/' . $page_title;

  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/group/' . $subgroup->id();

  /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
  $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
  $alias_uniquifier->uniquify($new_alias, $source, $langcode);

  if ($source !== $new_alias) {
    $path_alias = PathAlias::create([
      'path' => $source,
      'alias' => $new_alias,
    ]);

    $path_alias->save();
  }

  // Add aliases for tabs.
  $tabs = [
    'events',
    'contacts',
    'pages',
    'reports',
    'maps',
    'data',
    'assessments',
  ];

  foreach ($tabs as $tab) {
    $source = '/group/' . $subgroup->id() . '/' . $tab;
    $tab_alias = $new_alias . '/' . $tab;

    $existing_alias = $path_alias_manager->getAliasByPath($source);

    // Skip if an alias is already set.
    if ($existing_alias !== $source) {
      continue;
    }

    if ($source !== $tab_alias) {
      $path_alias = PathAlias::create([
        'path' => $source,
        'alias' => $tab_alias,
      ]);

      $path_alias->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_relationship_alias(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\GroupRelationship $entity */
  $plugin_id = $entity->getRelationshipType()->getPluginId();
  if ($plugin_id != 'group_node:page') {
    return;
  }

  $node = $entity->getEntity();
  $group = $entity->getGroup();

  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/node/' . $node->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $node_alias = $path_alias_manager->getAliasByPath($source);

  // Skip if an alias is already set.
  if ($node_alias !== $source) {
    return;
  }

  $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($node->label());

  $group_alias = $path_alias_manager->getAliasByPath('/group/' . $group->id());
  $new_alias = $group_alias . '/' . $page_title;

  /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
  $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
  $alias_uniquifier->uniquify($new_alias, $source, $langcode);

  if ($source !== $new_alias) {
    $path_alias = PathAlias::create([
      'path' => $source,
      'alias' => $new_alias,
    ]);

    $path_alias->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hr_paragraphs_group_relationship_update(EntityInterface $entity) {
  return hr_paragraphs_group_relationship_insert($entity);
}

/**
 * Implements hook_preprocess_paragraph().
 */
function hr_paragraphs_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $view_mode = $variables['view_mode'];
  if ($view_mode === 'preview') {
    // Check emptiness.
    $is_empty = TRUE;
    $outputted_fields = array_keys($variables['content']);

    foreach ($paragraph->getFields(FALSE) as $field) {
      if (in_array($field->getName(), $outputted_fields)) {
        if (!$field->isEmpty()) {
          $is_empty = FALSE;
        }
      }
    }

    if ($is_empty) {
      $variables['content']['empty_indicator'] = [
        '#type' => 'markup',
        '#markup' => t('No preview available'),
        '#weight' => -100,
        '#prefix' => '<div class="paragraph-empty-indicator">',
        '#suffix' => '</div>',
      ];
    }

    $variables['content']['indicator'] = [
      '#type' => 'markup',
      '#markup' => $paragraph->getParagraphType()->label(),
      '#weight' => -100,
      '#prefix' => '<div class="paragraph-preview-indicator">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__iframe(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $embed_url = '';

  if (!$paragraph->field_iframe_url->isEmpty()) {
    $embed_url = $paragraph->get('field_iframe_url')->first()->uri;
    $width = '100%';
    $height = '500px';
  }
  elseif (!$paragraph->field_embed_code->isEmpty()) {
    $settings = hr_paragraphs_handle_iframe($paragraph->field_embed_code->value);
    $embed_url = $settings['embed_url'];
    $width = $settings['width'];
    $height = $settings['height'];
  }

  if (empty($embed_url)) {
    return;
  }

  if (!$paragraph->field_iframe_aspect_ratio->isEmpty()) {
    $ratio = $paragraph->field_iframe_aspect_ratio->value;
  }
  else {
    $ratio = 'ratio-16-9';
  }

  if (strpos($embed_url, 'https://public.tableau.com/views') === 0) {
    if (strpos($embed_url, '?') !== FALSE) {
      $embed_url = substr($embed_url, 0, strpos($embed_url, '?'));
    }

    $variables['content']['embed'] = [
      '#theme' => 'hr_paragraphs_iframe_tableau',
      '#embed_url' => $embed_url,
      '#width' => $width,
      '#ratio' => $ratio,
      '#weight' => 99,
    ];
  }
  elseif (strpos($embed_url, 'https://app.powerbi.com/view') === 0) {
    $variables['content']['embed'] = [
      '#theme' => 'hr_paragraphs_iframe_powerbi',
      '#embed_url' => $embed_url,
      '#width' => $width,
      '#height' => $height,
      '#ratio' => $ratio,
      '#weight' => 99,
    ];
  }
  else {
    $variables['content']['embed'] = [
      '#theme' => 'hr_paragraphs_iframe',
      '#embed_url' => $embed_url,
      '#width' => $width,
      '#height' => $height,
      '#ratio' => $ratio,
      '#weight' => 99,
    ];
  }
}

/**
 * Validate iframe code and wrap it.
 */
function hr_paragraphs_handle_iframe($html) {
  $flags = LIBXML_NONET | LIBXML_NOBLANKS | LIBXML_NOERROR | LIBXML_NOWARNING;
  $prefix = '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>';
  $suffix = '</body></html>';
  $dom = new \DOMDocument();
  $dom->loadHTML($prefix . $html . $suffix, $flags);

  $iframes = $dom->getElementsByTagName('iframe');
  $iframe = $iframes[0];
  if (!$iframe) {
    return [
      'embed_url' => '',
      'width' => 0,
      'height' => 0,
    ];
  }

  return [
    'embed_url' => $iframe->getAttribute('src'),
    'width' => intval($iframe->getAttribute('width'), 10),
    'height' => intval($iframe->getAttribute('height'), 10),
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__rss_feed(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->field_rss_link->isEmpty()) {
    return;
  }

  $rss_options = $paragraph->field_rss_options->getValue();
  foreach ($rss_options as &$rss_option) {
    $rss_option = $rss_option['value'];
  }

  $max_number_of_items = $paragraph->field_max_number_of_items->value ?? 5;
  $options = [
    'display_date' => FALSE,
    'display_description' => FALSE,
    'display_each_item_full' => FALSE,
    'display_read_more' => FALSE,
  ];

  /** @var \Drupal\hr_paragraphs\Controller\RssController $rss_controller */
  $rss_controller = \Drupal::service('hr_paragraphs.rss_controller');
  $items = $rss_controller->getRssItems($paragraph->field_rss_link->first()->uri);

  if (empty($items)) {
    return;
  }

  if (in_array('display_date', $rss_options)) {
    $options['display_date'] = TRUE;
  }

  // Slice array.
  $items = array_slice($items, 0, $max_number_of_items);

  if (function_exists('hr_entity_freshness_write_date')) {
    $first = reset($items);
    hr_entity_freshness_write($paragraph, $first->date);
  }

  $variables['content']['embed'] = [
    '#theme' => 'hr_paragraphs_rss_feed',
    '#items' => $items,
    '#options' => $options,
    '#weight' => 99,
    '#cache' => [
      'max-age' => 60 * 60,
    ],
  ];

  // Add 'read more' if needed.
  if (in_array('display_read_more', $rss_options)) {
    $read_more_url = '';

    if ($paragraph->field_rss_read_more->isEmpty()) {
      $channel_link = $rss_controller->getRssChannelLink($paragraph->field_rss_link->first()->uri);
      if (!empty($channel_link)) {
        $read_more_url = $channel_link;
        $options['display_read_more'] = TRUE;
      }
    }
    else {
      $read_more_url = $paragraph->field_rss_read_more->first()->uri;
      $options['display_read_more'] = TRUE;
    }

    if ($options['display_read_more']) {
      $variables['content']['embed']['#read_more'] = [
        'url' => $read_more_url,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__upcoming_events(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $group = $paragraph->getParentEntity();

  // Make sure it exists.
  if (!$group) {
    return;
  }

  // If we are on page, get the group.
  if (get_class($group) == 'Drupal\node\Entity\Node') {
    $group_relationship_array = GroupRelationship::loadByEntity($group);
    $group_relationship = reset($group_relationship_array);
    if ($group_relationship) {
      $group = $group_relationship->getGroup();
    }
    else {
      return;
    }
  }

  if (!$group) {
    return;
  }

  if ($group->field_ical_url->isEmpty()) {
    return;
  }

  /** @var \Drupal\hr_paragraphs\Controller\IcalController $ical_controller */
  $ical_controller = \Drupal::service('hr_paragraphs.ical_controller');
  $start = date('Y-m-d');
  $end = date('Y-m-d', time() + 30 * 24 * 60 * 60);

  try {
    $events = $ical_controller->getIcalEvents($group, $start, $end);
  }
  catch (\Exception $exception) {
    // Fail silently.
    return [];
  }

  // Sort by start time.
  usort($events, function ($a, $b) {
    return strtotime($b['start']) < strtotime($a['start']) ? 1 : -1;
  });

  // Limit to 5 by default.
  $max_number_of_items = $paragraph->field_max_number_of_items->value ?? 5;

  // Slice array.
  $events = array_slice($events, 0, $max_number_of_items);

  $variables['content']['upcoming'] = [
    '#theme' => 'upcoming_events',
    '#events' => $events,
    '#read_more' => [
      'title' => 'More events',
      'url' => Url::fromRoute('hr_paragraphs.operation.events', [
        'group' => $group->id(),
      ]),
    ],
    '#weight' => 99,
    '#cache' => [
      'max-age' => 60 * 60,
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__child_groups(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  /** @var \Drupal\group\Entity\Group */
  $group = $paragraph->getParentEntity();

  // For preview mode.
  if (!$group) {
    return;
  }

  // If we are on page, get the group.
  if (get_class($group) == 'Drupal\node\Entity\Node') {
    $group_relationship_array = GroupRelationship::loadByEntity($group);
    $group_relationship = reset($group_relationship_array);
    if ($group_relationship) {
      $group = $group_relationship->getGroup();
    }
    else {
      return;
    }
  }

  if (!$group) {
    return;
  }

  try {
    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
    $subgroup_handler = \Drupal::entityTypeManager()->getHandler($group->getEntityTypeId(), 'subgroup');
    if (!$subgroup_handler->hasDescendants($group)) {
      return;
    }
    $children = $subgroup_handler->getDescendants($group);

    if (empty($children)) {
      return;
    }

    $items = [];
    $cache_tags = [];
    foreach ($children as $child) {
      $cache_tags += $child->getCacheTags();
      $items[] = [
        'label' => $child->label->value,
        'link' => Url::fromRoute('entity.group.canonical', [
          'group' => $child->id(),
        ]),
      ];
    }

    // Sort by label.
    $collator = new Collator('en_US');
    usort($items, function ($a, $b) use ($collator) {
      return $collator->compare($a['label'], $b['label']);
    });

    $variables['content']['children'] = [
      '#theme' => 'group_children',
      '#children' => $items,
      '#weight' => 99,
    ];

    $variables['#cache']['tags'] = array_merge($variables['#cache']['tags'] ?? [], $cache_tags);
    $variables['#cache']['contexts'] = [
      'languages',
    ];
  }
  catch (MalformedLeafException $exception) {
    return;
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__group_pages(&$variables) {
  $exclude_pages = [];

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  /** @var \Drupal\group\Entity\Group $group */
  $group = $paragraph->getParentEntity();

  // For preview mode.
  if (!$group) {
    return;
  }

  // If we are on page, get the group.
  if (get_class($group) == 'Drupal\node\Entity\Node') {
    $exclude_pages[] = $group->id();
    $group_relationship_array = GroupRelationship::loadByEntity($group);
    $group_relationship = reset($group_relationship_array);
    if ($group_relationship) {
      $group = $group_relationship->getGroup();
    }
    else {
      return;
    }
  }

  $groups = [
    $group,
  ];

  // Include pages of subgroups.
  if ($paragraph->hasField('field_include_subgroups') && $paragraph->field_include_subgroups->value) {
    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
    $subgroup_handler = \Drupal::entityTypeManager()->getHandler($group->getEntityTypeId(), 'subgroup');
    if (!$subgroup_handler->hasDescendants($group)) {
      return;
    }
    $groups = array_merge($groups, $subgroup_handler->getDescendants($group));
  }

  $nodes = [];
  foreach ($groups as $group) {
    // Exclude special pages.
    if ($group->hasField('field_offices_page') && !$group->field_offices_page->isEmpty()) {
      /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link */
      $link = $group->field_offices_page->first();

      if (!$link->isExternal()) {
        try {
          $params = $link->getUrl()->getRouteParameters();
          $exclude_pages[] = $params['node'];
        }
        catch (\Exception $exception) {
          // Ignore, deleted page.
        }
      }
    }

    if ($group->hasField('field_pages_page') && !$group->field_pages_page->isEmpty()) {
      /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link */
      $link = $group->field_pages_page->first();

      if (!$link->isExternal()) {
        try {
          $params = $link->getUrl()->getRouteParameters();
          $exclude_pages[] = $params['node'];
        }
        catch (\Exception $exception) {
          // Ignore, deleted page.
        }
      }
    }

    $nodes = array_merge($nodes, $group->getRelatedEntities('group_node:page'));
  }

  if (empty($nodes)) {
    return;
  }

  $items = [];
  $cache_tags = [];
  foreach ($nodes as $node) {
    // Skip current page.
    if (in_array($node->id(), $exclude_pages)) {
      continue;
    }

    $cache_tags += $node->getCacheTags();
    $items[] = [
      'label' => $node->title->value,
      'link' => Url::fromRoute('entity.node.canonical', [
        'node' => $node->id(),
      ]),
    ];
  }

  // Sort by label.
  $collator = new Collator('en_US');
  usort($items, function ($a, $b) use ($collator) {
    return $collator->compare($a['label'], $b['label']);
  });

  $variables['content']['nodes'] = [
    '#theme' => 'group_nodes',
    '#nodes' => $items,
    '#weight' => 99,
  ];

  $variables['#cache']['tags'] = array_merge($variables['#cache']['tags'] ?? [], $cache_tags);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__hdx_river(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Make sure link is set.
  if (!$paragraph->hasField('field_hdx_url') || $paragraph->field_hdx_url->isEmpty()) {
    return;
  }

  // Set max number of items to 5 by default.
  $max_number_of_items = $paragraph->field_max_number_of_items->value ?? 5;

  $url = $paragraph->field_hdx_url->first()->uri;

  try {
    /** @var \Drupal\hr_paragraphs\Controller\HdxController */
    $hdx_controller = \Drupal::service('hr_paragraphs.hdx_controller');
    $query_filters = $hdx_controller->parseHdxUrl($url);
    $parameters = $hdx_controller->buildHdxParameters(0, $max_number_of_items, $query_filters);
    $results = $hdx_controller->executeHdxQuery($parameters);
    $data = $hdx_controller->buildHdxObjects($results);

    if (function_exists('hr_entity_freshness_write_date')) {
      $max = 0;
      foreach ($data as $row) {
        $max = max($max, $row['date_created']);
      }
      hr_entity_freshness_write_date($paragraph, $max);
    }

    $variables['content']['rw_list'] = [
      '#theme' => 'hr_paragraphs_rw_list',
      '#data' => $data,
      '#view_all' => $paragraph->field_hdx_url->first()->uri,
      '#total' => $max_number_of_items,
      '#weight' => 99,
      '#cache' => [
        'max-age' => 60 * 60,
      ],
    ];
  }
  catch (\Exception $exception) {
    $variables['content']['rw_list'] = [
      '#type' => 'markup',
      '#markup' => t('HDX data is currently not available.'),
      '#prefix' => '<div class="response-error response-error-api response-error-hdx">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__reliefweb_river(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Make sure link is set.
  if (!$paragraph->hasField('field_reliefweb_url') || $paragraph->field_reliefweb_url->isEmpty()) {
    return;
  }

  // Set max number of items to 5 by default.
  $max_number_of_items = $paragraph->field_max_number_of_items->value ?? 5;

  $url = $paragraph->field_reliefweb_url->first()->uri;

  /** @var \Drupal\hr_paragraphs\Controller\ReliefwebController */
  $reliefweb_controller = \Drupal::service('hr_paragraphs.reliefweb_controller');
  $conditions = $reliefweb_controller->parseReliefwebUrl($url);
  $parameters = $reliefweb_controller->buildReliefwebParameters(0, $max_number_of_items, []);

  // Remove facets.
  unset($parameters['facets']);

  // Check for search paramater as well.
  if (isset($conditions['_query'])) {
    $parameters['query'] = [
      'value' => $conditions['_query'],
      'operator' => 'AND',
    ];
    unset($conditions['_query']);
  }

  foreach ($conditions as $condition) {
    $negative_operators = [
      'and-without',
      'or-without',
    ];
    $negate = FALSE;

    if (in_array($condition['operator'], $negative_operators)) {
      $negate = TRUE;
    }

    $parameters['filter']['conditions'][] = [
      'field' => $condition['field'],
      'value' => $condition['value'],
      'negate' => $negate,
    ];
  }

  try {
    $results = $reliefweb_controller->executeReliefwebQuery($parameters);
    $hide_thumbs = $paragraph->field_hide_thumbnails->value == 1 ? TRUE : FALSE;
    $data = $reliefweb_controller->buildReliefwebObjects($results, $hide_thumbs);

    if (function_exists('hr_entity_freshness_write_date')) {
      $max = 0;
      foreach ($data as $row) {
        $max = max($max, $row['date_created']);
      }
      hr_entity_freshness_write_date($paragraph, $max);
    }

    $variables['content']['rw_list'] = [
      '#theme' => 'hr_paragraphs_rw_list',
      '#data' => $data,
      '#view_all' => $paragraph->field_reliefweb_url->first()->uri,
      '#total' => $max_number_of_items,
      '#weight' => 99,
      '#cache' => [
        'max-age' => 60 * 60,
      ],
    ];
  }
  catch (\Exception $exception) {
    $variables['content']['rw_list'] = [
      '#type' => 'markup',
      '#markup' => t('ReliefWeb data is currently not available.'),
      '#prefix' => '<div class="response-error response-error-api response-error-reliefweb">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__reliefweb_document(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Make sure link is set.
  if (!$paragraph->hasField('field_reliefweb_url') || $paragraph->field_reliefweb_url->isEmpty()) {
    return;
  }

  $url = $paragraph->field_reliefweb_url->first()->uri;

  // Remove query parameters.
  $url = UrlHelper::parse($url)['path'];

  /** @var \Drupal\hr_paragraphs\Controller\ReliefwebController */
  $reliefweb_controller = \Drupal::service('hr_paragraphs.reliefweb_controller');
  $parameters = $reliefweb_controller->buildReliefwebParameters(0, 1, []);

  // Remove facets.
  unset($parameters['facets']);

  // URl might link to /node.
  if (strpos($url, '/node/') !== FALSE) {
    $parts = explode('/', $url);
    $nid = array_pop($parts);
    $parameters['filter']['conditions'][] = [
      'field' => 'id',
      'value' => $nid,
    ];
  }
  else {
    $parameters['filter']['conditions'][] = [
      'field' => 'url_alias',
      'value' => $url,
    ];
  }

  try {
    $results = $reliefweb_controller->executeReliefwebQuery($parameters);

    // Alias might no longer exist, fetch node id.
    if (empty($results['data'])) {
      $redirect = FALSE;

      try {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);

        curl_exec($ch);
        $redirect = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);
        curl_close($ch);

        \Drupal::logger('hr_paragraphs')->info('ReliefWeb document has a new URL, changed from @old to @new on @url', [
          '@old' => $url,
          '@new' => $redirect,
          '@url' => $paragraph->getParentEntity()->toUrl()->setAbsolute()->toString(),
        ]);

        // Remove last condition and add new one.
        array_pop($parameters['filter']['conditions']);
        $parameters['filter']['conditions'][] = [
          'field' => 'url_alias',
          'value' => $redirect,
        ];

        // Re-run the query.
        $results = $reliefweb_controller->executeReliefwebQuery($parameters);

        // Update the old URL if we have a result.
        if (!empty($results['data'])) {
          if (!$paragraph->isNew()) {
            $paragraph->field_reliefweb_url->set(0, $redirect);
            $paragraph->save();
          }
        }
      }
      catch (\Exception $e) {
        $variables['content']['rw_list'] = [
          '#type' => 'markup',
          '#markup' => t('ReliefWeb data is currently not available.'),
          '#prefix' => '<div class="response-error response-error-api response-error-reliefweb">',
          '#suffix' => '</div>',
        ];
      }
    }

    $parameters = $reliefweb_controller->buildReliefwebParameters(0, 1, []);
    $hide_thumbs = $paragraph->field_hide_thumbnails->value == 1 ? TRUE : FALSE;

    // Remove facets.
    unset($parameters['facets']);

    if (empty($results) || empty($results['data'])) {
      return;
    }

    $docs = $reliefweb_controller->buildReliefwebObjects($results, $hide_thumbs);
    $doc = reset($docs);

    if (function_exists('hr_entity_freshness_write_date')) {
      hr_entity_freshness_write_date($paragraph, $doc['date_created']);
    }

    $variables['content']['rw_list'] = [
      '#theme' => 'hr_paragraphs_rw_list',
      '#data' => [$doc],
      '#total' => NULL,
      '#view_all' => NULL,
      '#weight' => 99,
      '#cache' => [
        'max-age' => 60 * 60,
      ],
    ];
  }
  catch (\Exception $exception) {
    $variables['content']['rw_list'] = [
      '#type' => 'markup',
      '#markup' => t('ReliefWeb data is currently not available.'),
      '#prefix' => '<div class="response-error response-error-api response-error-reliefweb">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__reliefweb_key_figures(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Make sure Country is set.
  if (!$paragraph->hasField('field_country') || $paragraph->field_country->isEmpty()) {
    return;
  }

  $variables['content']['key_figures'] = [
    '#type' => 'markup',
    '#markup' => t('Key figure data is no longer available.'),
    '#prefix' => '<div class="response-error response-error-api response-error-fts">',
    '#suffix' => '</div>',
  ];
}

/**
 * Validate date filter values.
 *
 * @param string $code
 *   Filter code.
 * @param array $values
 *   Filter values.
 *
 * @return array
 *   Dates with a 'from' or a 'to' key or both.
 */
function hr_paragraphs_validate_date_filter_values($code, array $values) {
  if (empty($values)) {
    return [];
  }
  // We only accept one range.
  $values = $values[0];

  $values = array_map(function ($value) {
    if (strlen($value) !== 8 || !ctype_digit($value)) {
      return NULL;
    }
    $date = date_create_immutable_from_format('Ymd|', $value, timezone_open('UTC'));
    return $date;
  }, explode('-', $values, 2));

  $dates = [];
  if (count($values) === 1) {
    if (!empty($values[0])) {
      $dates['from'] = $values[0];
      $dates['to'] = $values[0];
    }
  }
  else {
    // If the to date is before the from date, we inverse the dates.
    if (!empty($values[0]) && !empty($values[1]) && $values[1] < $values[0]) {
      $temp = $values[0];
      $values[0] = $values[1];
      $values[1] = $temp;
    }

    if (!empty($values[0])) {
      $dates['from'] = $values[0];
    }
    if (!empty($values[1])) {
      $dates['to'] = $values[1];
    }
  }

  // Format the dates to ISO 8601.
  if (!empty($dates['from'])) {
    $dates['from'] = $dates['from']->format('c');
  }
  // The `to` date is inclusive, so we add 1 day minus 1 second to the
  // `to` date so that we cover the entire day.
  if (!empty($dates['to'])) {
    $dates['to'] = $dates['to']->modify('+1 day -1 second')->format('c');
  }

  return $dates;
}

/**
 * Implements hook_library_info_alter().
 */
function hr_paragraphs_library_info_alter(&$libraries, $extension) {
  if ($extension == 'claro') {
    $module_path = \Drupal::service('module_handler')->getModule(basename(__FILE__, '.module'))->getPath();
    $libraries['global-styling']['css']['theme']['/' . $module_path . '/css/admin.css'] = [];
  }

  if ($extension == 'fullcalendar_api') {
    $new_file = '/' . \Drupal::service('extension.list.module')->getPath('hr_paragraphs') . '/component/events/js/fullcalendar.js';
    $replacements = [
      'js/fullcalendar.load.js' => $new_file,
    ];

    $new_js = [];
    foreach ($libraries['fullcalendar_load']['js'] as $source => $options) {
      if (isset($replacements[$source])) {
        $new_js[$replacements[$source]] = $options;
      }
      else {
        $new_js[$source] = $options;
      }
    }
    $libraries['fullcalendar_load']['js'] = $new_js;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function hr_paragraphs_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if (empty($data['tabs'])) {
    return;
  }

  $weights = [
    'hr_paragraphs.operation' => -10,
    'group.view' => 0,
    'group.edit_form' => 5,
    'group.delete_form' => 10,
    'group.version_history' => 15,
    'views_view:view.group_members.page_1' => 20,
    'views_view:view.subgroups_of_a_group.page_1' => 30,
    'views_view:view.group_nodes.page_1' => 40,
    'content_translation.local_tasks:entity.group.content_translation_overview' => 100,
    'hr_paragraphs.operation.operations' => 999,
    'group.content' => 999,
  ];

  // Re-order tabs.
  foreach ($data['tabs'][0] as $key => &$tab) {
    if (isset($weights[$key])) {
      $tab['#weight'] = $weights[$key];
    }
  }

  // Hide add existing content local task.
  if (isset($data['tabs'][0]['group.view']['#access'])) {
    $data['tabs'][0]['group.view']['#access'] = FALSE;
  }

  // Hide duplicate local task.
  if (isset($data['tabs'][0]['group.view']['#access'])) {
    $data['tabs'][0]['group.view']['#access'] = FALSE;
  }

  // Hide all entities.
  if (isset($data['tabs'][0]['group.content']['#access'])) {
    $data['tabs'][0]['group.content']['#access'] = FALSE;
  }

  // New revisions tab.
  if (isset($data['tabs'][0]['entity.version_history:group.version_history']['#access'])) {
    $data['tabs'][0]['entity.version_history:group.version_history']['#access'] = FALSE;
  }

  // Mark local task active for queries.
  $supported_routes = [
    'hr_paragraphs.operation.pages',
    'hr_paragraphs.operation.reports',
    'hr_paragraphs.operation.maps',
    'hr_paragraphs.operation.assessments',
    'hr_paragraphs.operation.data',
    'hr_paragraphs.operation.events',
    'hr_paragraphs.operation.contacts',
    'hr_paragraphs.operation.ical',
  ];

  if (in_array($route_name, $supported_routes)) {
    if ($data['tabs'][1][$route_name]['#active']) {
      if (!isset($data['tabs'][1][$route_name]['#link']['localized_options']['attributes']['class'])) {
        $data['tabs'][1][$route_name]['#link']['localized_options']['attributes']['class'] = [];
      }

      $data['tabs'][1][$route_name]['#link']['localized_options']['attributes']['class'][] = 'is-active';

      // Add caching on url.
      $cacheability->addCacheContexts(['url']);
    }
  }

  // Mark link as being external if needed.
  /** @var \Drupal\group\Entity\GroupInterface */
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($group) {
    // Add group specific cache tags.
    $cacheability->addCacheTags($group->getCacheTags());

    foreach ($supported_routes as $tab_name) {
      if (!isset($data['tabs'][1][$tab_name])) {
        continue;
      }

      if (!isset($data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'])) {
        $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'] = [];
      }

      switch ($tab_name) {
        case 'hr_paragraphs.operation.reports':
          if ($group->hasField('field_documents_page') && !$group->field_documents_page->isEmpty()) {
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'][] = 'is-external';
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['target'] = '_blank';
          }
          break;

        case 'hr_paragraphs.operation.maps':
          if ($group->hasField('field_infographics') && !$group->field_infographics->isEmpty()) {
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'][] = 'is-external';
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['target'] = '_blank';
          }
          break;

        case 'hr_paragraphs.operation.assessments':
          if ($group->hasField('field_assessments_page') && !$group->field_assessments_page->isEmpty()) {
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'][] = 'is-external';
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['target'] = '_blank';
          }
          break;

        case 'hr_paragraphs.operation.data':
          if ($group->hasField('field_hdx_alternate_source') && !$group->field_hdx_alternate_source->isEmpty()) {
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'][] = 'is-external';
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['target'] = '_blank';
          }
          break;

        case 'hr_paragraphs.operation.events':
          if ($group->hasField('field_calendar_alternate_link') && !$group->field_calendar_alternate_link->isEmpty()) {
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'][] = 'is-external';
            $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['target'] = '_blank';
          }
          break;

        case 'hr_paragraphs.operation.contacts':
          if ($group->hasField('field_offices_page') && !$group->field_offices_page->isEmpty()) {
            /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link */
            $link = $group->field_offices_page->first();
            if ($link->isExternal()) {
              $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['class'][] = 'is-external';
              $data['tabs'][1][$tab_name]['#link']['localized_options']['attributes']['target'] = '_blank';
            }
          }

          break;

      }
    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function hr_paragraphs_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if (empty($breadcrumb)) {
    return;
  }

  if ($route_match->getRouteName() !== 'entity.group.add_form') {
    return;
  }

  $links = $breadcrumb->getLinks();
  if (!empty($links[1])) {
    $title = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());
    $links[1]->setText($title);
    $breadcrumb = new Breadcrumb();
    $breadcrumb->setLinks($links);
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function hr_paragraphs_menu_local_actions_alter(&$local_actions) {
  if (isset($local_actions['group.add_group'])) {
    unset($local_actions['group.add_group']);
  }

  if (isset($local_actions['group_relationship.group_node_relate_page'])) {
    unset($local_actions['group_relationship.group_node_relate_page']);
  }

  if (isset($local_actions['group_relationship.group_node_add_page'])) {
    $local_actions['group_relationship.group_node_add_page']['title'] = t('Add existing page');
  }

  if (isset($local_actions['group_relationship.group_node_create_page'])) {
    $local_actions['group_relationship.group_node_create_page']['title'] = t('Create new page');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hr_paragraphs_preprocess_node(&$variables) {
  hr_paragraphs_node_sidebar($variables);
  hr_paragraphs_node_is_archived($variables);
  hr_paragraphs_user_can_edit($variables);
  hr_paragraphs_node_parent_is_published($variables);
}

/**
 * Implements hook_preprocess_node().
 */
function hr_paragraphs_user_can_edit(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  /** @var \Drupal\user\Entity\User $current_user */
  $current_user = \Drupal::currentUser();

  $variables['can_edit'] = FALSE;
  if ($node->access('update', $current_user)) {
    $variables['can_edit'] = TRUE;
    return;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hr_paragraphs_node_sidebar(&$variables) {
  if ($variables['view_mode'] != 'full') {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Page without sidebar.
  if ($node->hasField('field_hide_sidebar') && !$node->field_hide_sidebar->isEmpty() && $node->field_hide_sidebar->value) {
    return;
  }

  $group_relationship_array = GroupRelationship::loadByEntity($node);
  $group_relationship = reset($group_relationship_array);
  if ($group_relationship) {
    $group = $group_relationship->getGroup();

    if ($group->hasField('field_sidebar_from_operation') && !$group->field_sidebar_from_operation->isEmpty() && $group->field_sidebar_from_operation->value) {
      if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
        $group = Group::load($group->subgroup_tree->value);
      }
    }

    if ($group->hasField('field_sidebar_menu') && !$group->field_sidebar_menu->isEmpty()) {
      $variables['field_sidebar_menu'] = $group->field_sidebar_menu->view();
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hr_paragraphs_node_is_archived(&$variables) {
  $node = $variables['node'];

  if (!($node instanceof Node)) {
    return;
  }

  $variables['is_archived'] = FALSE;
  /** @var \Drupal\group\Entity\Storage\GroupRelationshipStorage */
  $storage = \Drupal::entityTypeManager()->getStorage('group_relationship');
  $activGroupListEntity = $storage->loadByEntity($node);

  // Not a group node.
  if (empty($activGroupListEntity)) {
    return;
  }

  foreach ($activGroupListEntity as $groupRelationship) {
    $group = $groupRelationship->getGroup();
    if (!$group->hasField('field_archive_group')) {
      continue;
    }

    // Allow it if part of at least 1 non-archived group.
    if (!$group->field_archive_group->value) {
      // Check parent.
      if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
        $group = Group::load($group->subgroup_tree->value);
        if ($group->hasField('field_archive_group') && !$group->field_archive_group->value) {
          return;
        }
      }
      else {
        return;
      }
    }
  }

  $variables['is_archived'] = TRUE;
  $variables['archive_message'] = t('This group has been archived.');
  if (!$group->field_archive_message->isEmpty()) {
    $variables['archive_message'] = $group->field_archive_message->value;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hr_paragraphs_node_parent_is_published(&$variables) {
  $node = $variables['node'];

  if (!($node instanceof Node)) {
    return;
  }

  $variables['parent_is_published'] = TRUE;
  /** @var \Drupal\group\Entity\Storage\GroupRelationshipStorage */
  $storage = \Drupal::entityTypeManager()->getStorage('group_relationship');
  $activGroupListEntity = $storage->loadByEntity($node);

  // Not a group node.
  if (empty($activGroupListEntity)) {
    return;
  }

  foreach ($activGroupListEntity as $groupRelationship) {
    $group = $groupRelationship->getGroup();
    if (!$group->isPublished()) {
      $variables['parent_is_published'] = FALSE;
      return;
    }

    // Check parent.
    if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
      $group = Group::load($group->subgroup_tree->value);
      if (!$group->isPublished()) {
        $variables['parent_is_published'] = FALSE;
        return;
      }
    }
  }
}

/**
 * Implements hook_preprocess_group().
 */
function hr_paragraphs_preprocess_group(&$variables) {
  hr_paragraphs_group_sidebar($variables);
  hr_paragraphs_group_is_archived($variables);
  hr_paragraphs_group_parent_is_published($variables);
}

/**
 * Implements hook_preprocess_group().
 */
function hr_paragraphs_group_sidebar(&$variables) {
  if ($variables['view_mode'] != 'full') {
    return;
  }

  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['elements']['#group'];

  if ($group->hasField('field_sidebar_from_operation') && !$group->field_sidebar_from_operation->isEmpty() && $group->field_sidebar_from_operation->value) {
    if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
      $group = Group::load($group->subgroup_tree->value);
      if ($group->hasField('field_sidebar_menu') && !$group->field_sidebar_menu->isEmpty()) {
        $variables['content']['field_sidebar_menu'] = $group->field_sidebar_menu->view();
      }
    }
  }
}

/**
 * Implements hook_preprocess_group().
 */
function hr_paragraphs_group_is_archived(&$variables) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['elements']['#group'] ?? $variables['group'];

  if (!$group) {
    return;
  }

  if (!$group->hasField('field_archive_group')) {
    return;
  }

  $variables['is_archived'] = FALSE;
  if (!$group->field_archive_group->value) {
    // Check parent.
    if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
      $group = Group::load($group->subgroup_tree->value);
      if ($group->hasField('field_archive_group') && !$group->field_archive_group->value) {
        return;
      }
    }
    else {
      return;
    }
  }

  $variables['is_archived'] = TRUE;
  $variables['archive_message'] = t('This group has been archived.');
  if (!$group->field_archive_message->isEmpty()) {
    $variables['archive_message'] = $group->field_archive_message->value;
  }
}

/**
 * Implements hook_preprocess_group().
 */
function hr_paragraphs_group_parent_is_published(&$variables) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['elements']['#group'] ?? $variables['group'];
  $variables['parent_is_published'] = TRUE;

  if (!$group) {
    return;
  }

  if (!$group->hasField('field_archive_group')) {
    return;
  }

  // Check parent.
  if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
    $group = Group::load($group->subgroup_tree->value);
    if (!$group->isPublished()) {
      $variables['parent_is_published'] = FALSE;
    }
  }
}

/**
 * Parse query string, allowing duplicate keys.
 */
function hr_paragraphs_parse_str($string) {
  $results = [];

  if (empty($string)) {
    return $results;
  }

  $parts = explode('&', $string);

  foreach ($parts as $part) {
    if (strpos($part, '=') === FALSE) {
      continue;
    }

    // Split into name and value.
    [$name, $value] = explode('=', $part, 2);

    // Decode value.
    $value = urldecode($value);

    // If name already exists.
    if (isset($results[$name])) {
      // Stick multiple values into an array.
      if (is_array($results[$name])) {
        $results[$name][] = $value;
      }
      else {
        $results[$name] = [$results[$name], $value];
      }
    }
    // Otherwise, simply stick it in a scalar.
    else {
      $results[$name] = $value;
    }
  }

  return $results;
}

/**
 * Implements template_preprocess_html().
 */
function hr_paragraphs_preprocess_html(&$variables) {
  /** @var Drupal\group\Entity\Group $group */
  $group = \Drupal::request()->attributes->get('group');
  if (!$group) {
    return;
  }

  /** @var \Drupal\Core\Routing\RouteMatch $route_match */
  $route_match = \Drupal::routeMatch();
  if (!$route_match) {
    return;
  }

  // Only act on group homepage and tabs.
  if (strpos($route_match->getRouteName(), 'hr_paragraphs.operation.') === FALSE && strpos($route_match->getRouteName(), 'entity.group.canonical') === FALSE) {
    return;
  }

  // Add operation name for cluster homepage.
  if (strpos($route_match->getRouteName(), 'entity.group.canonical') !== FALSE) {
    if ($group->bundle() == 'cluster' && $group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
      $operation = Group::load($group->subgroup_tree->value);
      $variables['head_title']['title'] = $operation->label->value . ': ' . $variables['head_title']['title'];
    }

    return;
  }

  if ($group->bundle() == 'cluster' && $group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
    $operation = Group::load($group->subgroup_tree->value);
    $variables['head_title']['title'] = $operation->label->value . ': ' . $group->label->value . ' - ' . $variables['head_title']['title'];
  }
  else {
    $variables['head_title']['title'] = $group->label->value . ' - ' . $variables['head_title']['title'];
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function hr_paragraphs_theme_registry_alter(&$theme_registry) {
  if (!isset($theme_registry['fullcalendar_calendar'])) {
    return;
  }

  $theme_registry['fullcalendar_calendar']['variables']['group'] = NULL;
}

/**
 * Implements hook_preprocess_river().
 */
function hr_paragraphs_preprocess_river(&$variables) {
  hr_paragraphs_group_is_archived($variables);
}

/**
 * Implements hook_preprocess_fullcalendar_calendar().
 */
function hr_paragraphs_preprocess_fullcalendar_calendar(&$variables) {
  hr_paragraphs_group_is_archived($variables);
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 *
 * @see subgroup_group_create_access()
 */
function hr_paragraphs_group_create_access(AccountInterface $account, array $context, $entity_bundle) {
  /** @var \Drupal\group\Entity\GroupInterface $entity */
  $group_type = \Drupal::entityTypeManager()->getStorage('group_type')->load($entity_bundle);

  return AccessResult::neutral()->addCacheableDependency($group_type);
}

/**
 * Implements hook_module_implements_alter().
 *
 * @see hr_paragraphs_group_create_access()
 */
function hr_paragraphs_module_implements_alter(array &$implementations, string $hook) {
  if ($hook !== 'group_create_access') {
    return;
  }

  if (isset($implementations['subgroup'])) {
    unset($implementations['subgroup']);
  }
}

/**
 * Implements hook_form_alter().
 */
function hr_paragraphs_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide path for memberships.
  $form_ids = [
    'group_relationship_operation-group_membership_add_form',
    'group_relationship_operation-group_membership_edit_form',
    'group_relationship_cluster-group_membership_add_form',
    'group_relationship_cluster-group_membership_edit_form',
  ];

  if (in_array($form_id, $form_ids)) {
    if (isset($form['path'])) {
      unset($form['path']);
    }
  }

  // Remove "Pages" from enabled tabs.
  $form_ids = [
    'group_operation_edit_form',
    'group_operation_add_form',
    'group_cluster_edit_form',
    'group_cluster_add_form',
  ];

  if (in_array($form_id, $form_ids)) {
    if (isset($form['field_enabled_tabs'])) {
      unset($form['field_enabled_tabs']['widget']['#options']['pages']);
    }

    $user = \Drupal::currentUser();

    // Hide language option for managers.
    if (isset($form['langcode'])) {
      if (!$user->hasPermission('create operation group')) {
        $form['langcode']['#access'] = FALSE;
      }
    }

    // Restrict access to status.
    if (!$user->hasPermission('rwr unpublish group')) {
      $form['status']['#access'] = FALSE;
    }

    // Restrict access to edit title.
    if (strpos($form_id, '_edit_form') !== FALSE) {
      /** @var \Drupal\group\Entity\Group $group */
      $group = $form_state->getFormObject()->getEntity();
      $bundle = $group->bundle();

      switch ($bundle) {
        case 'operation':
          if (!$user->hasPermission('rwr edit ' . $bundle . ' title')) {
            $form['label']['#disabled'] = TRUE;
          }
          break;

        case 'cluster':
          // Manager of parent (operation) may edit field.
          if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
            $operation = Group::load($group->subgroup_tree->value);
            if ($member = $operation->getMember($user)) {
              $roles = $member->getRoles();
              if (!isset($roles['operation-manager'])) {
                if (!$user->hasPermission('rwr edit ' . $bundle . ' title')) {
                  $form['label']['#disabled'] = TRUE;
                }
              }
            }
            else {
              // Not a member of the operation.
              if (!$user->hasPermission('rwr edit ' . $bundle . ' title')) {
                $form['label']['#disabled'] = TRUE;
              }
            }
          }
          else {
            // No operation found.
            if (!$user->hasPermission('rwr edit ' . $bundle . ' title')) {
              $form['label']['#disabled'] = TRUE;
            }
          }
          break;

        default:
          if (!$user->hasPermission('rwr edit ' . $bundle . ' title')) {
            $form['label']['#disabled'] = TRUE;
          }
          break;

      }
    }
  }

  // Move meta description field to sidebar.
  hr_paragraphs_move_meta_description_field($form, $form_state, $form_id);
}

/**
 * Implements template_preprocess_views_view().
 */
function hr_paragraphs_preprocess_views_view(&$variables) {
  /** @var \Drupal\views\Entity\View */
  $view = $variables['view'];
  if ($view->id() == 'group_members' && $view->current_display == 'page_1') {
    if (!isset($view->args[0])) {
      return;
    }

    // Load the group.
    $group_id = $view->args[0];
    $group = Group::load($group_id);
    if ($group->bundle() == 'operation') {
      return;
    }

    // Get operation.
    if (!$group->hasField('subgroup_tree') || $group->subgroup_tree->isEmpty()) {
      return;
    }

    $parent = Group::load($group->subgroup_tree->value);
    $url = Url::fromRoute('view.group_members.page_1', [
      'group' => $parent->id(),
    ]);
    $operation_manager = TRUE;

    // Make sure user has access.
    $userCurrent = \Drupal::currentUser();
    if (!$url->access($userCurrent)) {
      $url = Url::fromRoute('entity.group.canonical', [
        'group' => $parent->id(),
      ]);
      $operation_manager = FALSE;

      if (!$url->access($userCurrent)) {
        return;
      }
    }

    $variables['cluster_message'] = [
      'operation_manager' => $operation_manager,
      'operation' => $parent->label(),
      'link' => $url->toString(),
    ];
  }
}

/**
 * Implements hook_group_relationship_info_alter().
 */
function hr_paragraphs_group_relationship_info_alter(&$definitions) {
  // Hide sub groups and pages when unpublished.
  $definitions['group_node:landing_page']['handlers']['access'] = 'Drupal\hr_paragraphs\Plugin\GroupNodeAccessControlHandler';
  $definitions['group_node:page']['handlers']['access'] = 'Drupal\hr_paragraphs\Plugin\GroupNodeAccessControlHandler';
}

/**
 * Implements hook_entity_access().
 */
function hr_paragraphs_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $entity_type_id = $entity->getEntityTypeId();
  if ($operation === 'view' && $entity_type_id === 'group') {
    if (!$account->hasPermission('access content overview')) {
      // Check parent.
      /** @var \Drupal\group\Entity\Group $entity */
      if ($entity->hasField('subgroup_tree') && !$entity->subgroup_tree->isEmpty()) {
        $parent = Group::load($entity->subgroup_tree->value);
        if (!$parent->isPublished()) {
          return AccessResult::forbidden();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Remove any layout paragraph.
 */
function hr_paragraphs_remove_layout_paragraph_from_node($id) {
  hr_paragraphs_remove_layout_paragraph_from_entity('node', $id);
}

/**
 * Remove any layout paragraph.
 */
function hr_paragraphs_remove_layout_paragraph_from_group($id) {
  hr_paragraphs_remove_layout_paragraph_from_entity('group', $id);
}

/**
 * Remove any layout paragraph.
 */
function hr_paragraphs_remove_layout_paragraph_from_entity($entity_type, $id) {
  $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
  $entity = $storage->load($id);

  if (!$entity) {
    return;
  }

  /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
  if (!$entity->hasField('field_paragraphs')) {
    return;
  }

  $paras = $entity->field_paragraphs->referencedEntities();
  foreach ($paras as $delta => $para) {
    if ($para->bundle() == 'layout') {
      unset($paras[$delta]);
    }
    else {
      $para->setAllBehaviorSettings([
        'layout_paragraphs' => [
          'parent_uuid' => NULL,
          'region' => NULL,
        ],
      ]);
      $para->save();
    }
  }

  $entity->field_paragraphs = $paras;
  $entity->save();
}

/**
 * Implements hook_mail().
 */
function hr_paragraphs_mail($key, &$message, $params) {
  switch ($key) {
    case 'user_created':
      $message['subject'] = t('New HID login on Response site');
      $message['body'][] = t("Dear team\n\nThere is new user created on the site.");
      $message['body'][] = t("\n\nEmail address: @mail.", [
        '@mail' => $params['mail'],
      ]);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_paragraphs_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-groups-page-1' || $form['#id'] === 'views-exposed-form-subgroups-of-a-group-page-1') {
    $form['status']['#options'][1] = t('Published');
    $form['status']['#options'][0] = t('Unpublished');

    $form['archived']['#options'][1] = t('Yes');
    $form['archived']['#options'][0] = t('No');
  }
  elseif ($form['#id'] === 'views-exposed-form-content-page-1') {
    // Load all groups.
    $groups = Group::loadMultiple();

    // Build options.
    foreach ($groups as $group) {
      $value = $group->label();

      if ($group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
        if ($group->id() != $group->subgroup_tree->value) {
          $parent = Group::load($group->subgroup_tree->value);
          $value = $parent->label() . ' > ' . $value;
        }
      }

      if (!empty($value)) {
        $options[$group->id()] = $value;
      }
    }

    // Sort and add an All option.
    asort($options);
    $options = ['' => 'All'] + $options;

    // Output as select list.
    if (isset($form['gid'])) {
      $form['gid']['#type'] = 'select';
      $form['gid']['#options'] = $options;
      $form['gid']['#size'] = 1;

    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function hr_paragraphs_entity_base_field_info(EntityTypeInterface $entity_type) {
  switch ($entity_type->id()) {
    case 'group':
      return hr_paragraphs_custom_group_fields();

    case 'user':
      return hr_paragraphs_custom_user_fields();

    case 'node':
      return hr_paragraphs_custom_node_fields();

    case 'linkcheckerlink':
      return hr_paragraphs_custom_linkcheckerlink_fields();

  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function hr_paragraphs_custom_group_fields() {
  $fields = [];

  // Enabled tabs.
  $fields['enabled_tabs'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Enabled tabs'))
    ->setDescription(t('Enabled and active tabs'))
    ->setRevisionable(TRUE)
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);

  // Used paragraph types.
  $fields['used_paragraphs'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Used paragraphs'))
    ->setDescription(t('List of paragraph types in use'))
    ->setRevisionable(TRUE)
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);

  return $fields;
}

/**
 * Implements hook_entity_base_field_info().
 */
function hr_paragraphs_custom_user_fields() {
  $fields = [];

  // Enabled tabs.
  $fields['manager_for'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Manager of'))
    ->setDescription(t('Manager of the following groups'))
    ->setRevisionable(TRUE)
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setSettings([
      'target_type' => 'group',
      'default_value' => 0,
    ])
    ->setDisplayOptions('view', [
      'label' => 'above',
      'weight' => -5,
    ]
  );

  return $fields;
}

/**
 * Implements hook_entity_base_field_info().
 */
function hr_paragraphs_custom_node_fields() {
  $fields = [];

  // Used paragraph types.
  $fields['used_paragraphs'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Used paragraphs'))
    ->setDescription(t('List of paragraph types in use'))
    ->setRevisionable(TRUE)
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);

  return $fields;
}

/**
 * Implements hook_entity_base_field_info().
 */
function hr_paragraphs_custom_linkcheckerlink_fields() {
  $fields = [];

  // Used paragraph types.
  $fields['link_type'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Type of link'))
    ->setDescription(t('Type of link.'))
    ->setReadOnly(TRUE)
    ->setSettings([
      'default_value' => '',
      'max_length' => 255,
    ])
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'string',
      'weight' => -5,
    ])
    ->setDisplayOptions('form', [
      'type' => 'string',
      'weight' => -5,
    ]);

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hr_paragraphs_group_presave(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\Group $entity */

  /** @var \Drupal\hr_paragraphs\Controller\ParagraphController $controller */
  $controller = \Drupal::service('hr_paragraphs.paragraph_controller');

  // Store enabled tabs.
  $enabled_tabs = [];
  if ($controller->hasDocuments($entity)) {
    $enabled_tabs[] = 'Reports';
  }

  if ($controller->hasInfographics($entity)) {
    $enabled_tabs[] = 'Maps';
  }

  if ($controller->hasAssessments($entity)) {
    $enabled_tabs[] = 'Assessments';
  }

  if ($controller->hasDatasets($entity)) {
    $enabled_tabs[] = 'Datasets';
  }

  if ($controller->hasEvents($entity)) {
    $enabled_tabs[] = 'Events';
  }

  if ($controller->hasContacts($entity)) {
    $enabled_tabs[] = 'Contacts';
  }

  if ($controller->hasPages($entity)) {
    $enabled_tabs[] = 'Pages';
  }

  $entity->set('enabled_tabs', $enabled_tabs);

  // Store used paragraphs.
  $used_paragraphs = [];
  if ($entity->hasField('field_paragraphs') && !$entity->field_paragraphs->isEmpty()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph[] $paragraphs */
    $paragraphs = $entity->field_paragraphs->referencedEntities();
    foreach ($paragraphs as $paragraph) {
      if (!isset($used_paragraphs[$paragraph->bundle()])) {
        $used_paragraphs[$paragraph->bundle()] = [
          'label' => $paragraph->getParagraphType()->label(),
          'count' => 1,
        ];
      }
      else {
        $used_paragraphs[$paragraph->bundle()]['count']++;
      }
    }
  }

  if ($entity->hasField('field_sidebar_menu') && !$entity->field_sidebar_menu->isEmpty()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph[] $paragraphs */
    $paragraphs = $entity->field_sidebar_menu->referencedEntities();
    foreach ($paragraphs as $paragraph) {
      if (!isset($used_paragraphs[$paragraph->bundle()])) {
        $used_paragraphs[$paragraph->bundle()] = [
          'label' => $paragraph->getParagraphType()->label(),
          'count' => 1,
        ];
      }
      else {
        $used_paragraphs[$paragraph->bundle()]['count']++;
      }
    }
  }

  $formatted = [];
  foreach ($used_paragraphs as $used_paragraph) {
    $formatted[] = $used_paragraph['label'] . ' (' . $used_paragraph['count'] . ')';
  }
  sort($formatted);
  $entity->set('used_paragraphs', $formatted);

  // Revert changed time during update.
  if ($entity->isMigrating) {
    $original = $entity->getOriginal();
    $langcode = $entity->language()->getId();
    if (!$entity->isNew() && $original && $original->hasTranslation($langcode)) {
      $original_value = $original->getTranslation($langcode)->get('changed')->value;
      $entity->set('changed', $original_value);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hr_paragraphs_user_presave(EntityInterface $entity) {
  /** @var \Drupal\user\Entity\User $entity */
  // Skip for new users.
  if ($entity->isNew()) {
    return;
  }

  $manager_for = [];

  /** @var \Drupal\group\GroupMembershipLoader */
  $group_membership_service = \Drupal::service('group.membership_loader');
  $group_memberships = $group_membership_service->loadByUser($entity, [
    'operation-manager',
    'cluster-manager',
  ]);

  foreach ($group_memberships as $group_membership) {
    $manager_for[] = $group_membership->getGroup();
  }

  $entity->set('manager_for', $manager_for);

  // Revert changed time during update.
  if ($entity->isMigrating) {
    $original = $entity->getOriginal();
    if (!$entity->isNew() && $original) {
      $original_value = $original->get('changed')->value;
      $entity->set('changed', $original_value);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hr_paragraphs_node_presave(EntityInterface $entity) {
  /** @var \Drupal\node\Entity\Node $entity */
  // Store used paragraphs.
  $used_paragraphs = [];
  if ($entity->hasField('field_paragraphs') && !$entity->field_paragraphs->isEmpty()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph[] $paragraphs */
    $paragraphs = $entity->field_paragraphs->referencedEntities();
    foreach ($paragraphs as $paragraph) {
      if (!isset($used_paragraphs[$paragraph->bundle()])) {
        $used_paragraphs[$paragraph->bundle()] = [
          'label' => $paragraph->getParagraphType()->label(),
          'count' => 1,
        ];
      }
      else {
        $used_paragraphs[$paragraph->bundle()]['count']++;
      }
    }
  }

  if ($entity->hasField('field_paragraphs_secondary') && !$entity->field_paragraphs_secondary->isEmpty()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph[] $paragraphs */
    $paragraphs = $entity->field_paragraphs_secondary->referencedEntities();
    foreach ($paragraphs as $paragraph) {
      if (!isset($used_paragraphs[$paragraph->bundle()])) {
        $used_paragraphs[$paragraph->bundle()] = [
          'label' => $paragraph->getParagraphType()->label(),
          'count' => 1,
        ];
      }
      else {
        $used_paragraphs[$paragraph->bundle()]['count']++;
      }
    }
  }

  $formatted = [];
  foreach ($used_paragraphs as $used_paragraph) {
    $formatted[] = $used_paragraph['label'] . ' (' . $used_paragraph['count'] . ')';
  }
  sort($formatted);
  $entity->set('used_paragraphs', $formatted);

  // Revert changed time during update.
  if ($entity->isMigrating) {
    $original = $entity->getOriginal();
    $langcode = $entity->language()->getId();
    if (!$entity->isNew() && $original && $original->hasTranslation($langcode)) {
      $original_value = $original->getTranslation($langcode)->get('changed')->value;
      $entity->set('changed', $original_value);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hr_paragraphs_paragraph_presave(EntityInterface $entity) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $entity */
  if (!$entity->hasField('field_text')) {
    return;
  }

  // Only if format is basic_html.
  if (!$entity->field_text->format) {
    return;
  }

  if ($entity->field_text->format != 'basic_html') {
    return;
  }

  // Remove class and style from all tags.
  $text = $entity->field_text->value;
  $text = preg_replace('/(<[a-zA-Z0-9]+)([^>]*)( class="[^"]*")([^>]*>)/', '$1$2$4', $text);
  $text = preg_replace('/(<[a-zA-Z0-9]+)([^>]*)( style="[^"]*")([^>]*>)/', '$1$2$4', $text);

  // Remove all attributes starting with data-.
  $text = preg_replace('/(<[a-zA-Z0-9]+)([^>]*)( data-[^=]+="[^"]*")([^>]*>)/', '$1$2$4', $text);

  // Remove empty attributes.
  $text = preg_replace('/(<[a-zA-Z0-9]+)([^>]*)( [a-zA-Z0-9-]+="")([^>]*>)/', '$1$2$4', $text);

  // Remove empty tags.
  $text = preg_replace('/<([a-zA-Z0-9]+)([^>]*)><\/\1>/', '', $text);

  // Remove multiple spaces.
  $text = preg_replace('/\s+/', ' ', $text);

  // Trim.
  $text = trim($text);

  $entity->field_text->value = $text;
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function hr_paragraphs_editor_js_settings_alter(array &$settings) {
  if (isset($settings['editor']['formats']['full_html']['editorSettings']['format_tags'])
    && strpos($settings['editor']['formats']['full_html']['editorSettings']['format_tags'], 'h1;')) {
    $format_tags = str_replace('h1;', '', $settings['editor']['formats']['full_html']['editorSettings']['format_tags']);
    $settings['editor']['formats']['full_html']['editorSettings']['format_tags'] = $format_tags;
  }

  if (isset($settings['editor']['formats']['basic_html']['editorSettings']['format_tags'])
    && strpos($settings['editor']['formats']['basic_html']['editorSettings']['format_tags'], 'h1;')) {
    $format_tags = str_replace('h1;', '', $settings['editor']['formats']['basic_html']['editorSettings']['format_tags']);
    $settings['editor']['formats']['basic_html']['editorSettings']['format_tags'] = $format_tags;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function hr_paragraphs_views_data_alter(array &$data) {
  $data['linkchecker_link']['active_revisions'] = [
    'title' => t('Filter out old revisions'),
    'help' => t('Filter out old revisions.'),
    'filter' => [
      'title' => t('Filter out old revisions'),
      'id' => 'linkchecker_link_active_revisions',
    ],
  ];

  $data['linkchecker_link']['linkcheckerlink_group_entity_label'] = [
    'field' => [
      'title' => t('Group entity label'),
      'help' => t('The label of the group that is related.'),
      'id' => 'linkcheckerlink_group_entity_label',
    ],
  ];

  $data['linkchecker_link']['linkcheckerlink_group_entity_link'] = [
    'field' => [
      'title' => t('Group entity link'),
      'help' => t('The link of the group that is related.'),
      'id' => 'linkcheckerlink_group_entity_link',
    ],
  ];

  $data['linkchecker_link']['linkcheckerlink_page_entity_link'] = [
    'field' => [
      'title' => t('Page entity link'),
      'help' => t('The link of the page that is related.'),
      'id' => 'linkcheckerlink_page_entity_link',
    ],
  ];
}

/**
 * Move meta description and check permissions.
 */
function hr_paragraphs_move_meta_description_field(&$form, &$form_state, $form_id) {
  // Nodes.
  $form_ids = [
    'node_landing_page_edit_form',
    'node_landing_page_form',
    'node_page_edit_form',
    'node_page_form',
  ];

  if (in_array($form_id, $form_ids)) {
    if (!empty($form['field_meta_description']) && $form['field_meta_description']['#type'] == 'container') {
      $form['field_meta_description']['#type'] = 'details';
      $form['field_meta_description']['#group'] = 'advanced';
      $form['field_meta_description']['#title'] = t('Meta description');
      $form['field_meta_description']['#open'] = TRUE;

      // Only for global editors.
      $userCurrent = \Drupal::currentUser();
      if (!$userCurrent->hasPermission('rwr edit meta tags')) {
        $form['field_meta_description']['#access'] = FALSE;
      }
    }

    return;
  }

  // Groups.
  $form_ids = [
    'group_cluster_add_form',
    'group_cluster_edit_form',
    'group_operation_add_form',
    'group_operation_edit_form',
  ];

  if (in_array($form_id, $form_ids)) {
    if (!empty($form['field_meta_description']) && $form['field_meta_description']['#type'] == 'container') {
      // Only for global editors.
      $userCurrent = \Drupal::currentUser();
      if (!$userCurrent->hasPermission('rwr edit meta tags')) {
        $form['field_meta_description']['#access'] = FALSE;
      }
    }

    return;
  }
}

/**
 * Implements hook_metatags_alter().
 */
function hr_paragraphs_metatags_alter(array &$metatags, array &$context) {
  /** @var \Drupal\Core\Routing\RouteMatch $route_match */
  $route_match = \Drupal::routeMatch();
  if (!$route_match) {
    return;
  }

  $route_name = $route_match->getRouteName();

  // Skip if the page is not found or accessible.
  if ($route_name === 'system.403' || $route_name === 'system.404') {
    return;
  }

  hr_paragraphs_metatags_for_rivers($metatags, $context);

  // Copy general tags to og tags.
  $site_name = \Drupal::config('system.site')->get('name');

  $metatags['og_site_name'] = $site_name;
  $metatags['og_image'] = "/themes/custom/common_design_subtheme/img/logos/response-logo.svg";

  if (isset($metatags['canonical'])) {
    $metatags['og_url'] = $metatags['canonical'];
  }

  if (isset($metatags['title'])) {
    $metatags['og_title'] = $metatags['title'];
  }

  if (isset($metatags['description'])) {
    $metatags['og_description'] = $metatags['description'];
  }
}

/**
 * Implements hook_metatags_alter().
 */
function hr_paragraphs_metatags_for_rivers(array &$metatags, array &$context) {
  $site_name = \Drupal::config('system.site')->get('name');

  /** @var \Drupal\Core\Routing\RouteMatch $route_match */
  $route_match = \Drupal::routeMatch();
  if (!$route_match) {
    return;
  }

  $route_name = $route_match->getRouteName();
  $entity = $context['entity'];

  // Force title.
  $title = '';
  switch ($route_name) {
    case 'entity.node.canonical':
      /** @var \Drupal\node\Entity\Node $entity */
      $title = $entity->label() . ' | ' . $site_name;
      break;

    case 'entity.group.canonical':
      /** @var \Drupal\group\Entity\Group $entity */
      if ($entity->bundle() == 'operation') {
        $title = $entity->label() . ' | ' . $site_name;
      }
      elseif ($entity->bundle() == 'cluster' && $entity->hasField('subgroup_tree') && !$entity->subgroup_tree->isEmpty()) {
        $operation = Group::load($entity->subgroup_tree->value);
        $title = $operation->label() . ': ' . $entity->label() . ' | ' . $site_name;
      }
      break;

    case 'hr_paragraphs.operation.pages':
    case 'hr_paragraphs.operation.reports':
    case 'hr_paragraphs.operation.maps':
    case 'hr_paragraphs.operation.assessments':
    case 'hr_paragraphs.operation.data':
    case 'hr_paragraphs.operation.events':
    case 'hr_paragraphs.operation.contacts':
    case 'hr_paragraphs.operation.operations':
    case 'hr_paragraphs.operation.ical':
      /** @var Drupal\group\Entity\Group $group */
      $group = \Drupal::request()->attributes->get('group');
      if (!$group) {
        return;
      }

      /** @var \Drupal\group\Entity\Group $entity */
      if ($group->bundle() == 'operation') {
        $title = $group->label() . ' - ' . $route_match->getRouteObject()->getDefault('_title') . ' | ' . $site_name;
      }
      elseif ($group->bundle() == 'cluster' && $group->hasField('subgroup_tree') && !$group->subgroup_tree->isEmpty()) {
        $operation = Group::load($group->subgroup_tree->value);
        $title = $operation->label() . ': ' . $group->label() . ' - ' . $route_match->getRouteObject()->getDefault('_title') . ' | ' . $site_name;
      }
      break;
  }

  if (!empty($title)) {
    $metatags['title'] = $title;
    $metatags['og:title'] = $title;
  }

  // Force description for tabs.
  /** @var Drupal\group\Entity\Group $group */
  $group = \Drupal::request()->attributes->get('group');
  if ($group) {
    $description = '';
    switch ($route_name) {
      case 'entity.group.canonical':
        if ($group->hasField('field_meta_description') && !$group->field_meta_description->isEmpty()) {
          $description = $group->field_meta_description->value;
        }
        else {
          /** @var \Drupal\group\Entity\Group $entity */
          if ($group->bundle() == 'operation') {
            $description = t('Stay updated on humanitarian operations in @label. Find locally curated resources, assessments, meetings and contacts to coordinate relief efforts.', [
              '@label' => $group->label(),
            ]);
          }
          else {
            $description = t('Get the latest information on the humanitarian work of the cluster/working group. Access crucial resources, meetings, contacts, and more.');
          }
        }
        break;

      case 'hr_paragraphs.operation.reports':
        if ($group->bundle() == 'operation') {
          $description = t('Find the latest situation reports, analysis and more in @label. Explore our resources to make informed, impactful decisions.', [
            '@label' => $group->label(),
          ]);
        }
        else {
          $description = t('Access the latest situation reports, analysis and more. Explore our resources to make informed, impactful decisions.');
        }
        break;

      case 'hr_paragraphs.operation.maps':
        if ($group->bundle() == 'operation') {
          $description = t('Discover latest maps and infographics for @label. Visualize complex data, gain crucial insights, and enhance your understanding of crisis areas.', [
            '@label' => $group->label(),
          ]);
        }
        else {
          $description = t('Discover latest maps and infographics. Visualize complex data and, gain crucial insights, and enhance your understanding of crisis areas.');
        }
        break;

      case 'hr_paragraphs.operation.assessments':
        if ($group->bundle() == 'operation') {
          $description = t('Find the latest humanitarian needs assessments. Gain a deeper understanding of vulnerable populations and people in need in @label.', [
            '@label' => $group->label(),
          ]);
        }
        else {
          $description = t('Find the latest humanitarian needs assessments. Gain a deeper understanding of vulnerable populations and people in need.');
        }
        break;

      case 'hr_paragraphs.operation.data':
        if ($group->bundle() == 'operation') {
          $description = t('Explore critical data for research, analysis, and insights on humanitarian operations in @label.', [
            '@label' => $group->label(),
          ]);
        }
        else {
          $description = t('Access critical data for research, analysis, and insights on humanitarian operations.');
        }
        break;

      case 'hr_paragraphs.operation.events':
        if ($group->bundle() == 'operation') {
          $description = t('Stay connected and informed with our humanitarian event calendar. Never miss a critical meeting in @label.', [
            '@label' => $group->label(),
          ]);
        }
        else {
          $description = t('Stay connected and informed with our humanitarian event calendar. Never miss a critical meeting.');
        }
        break;

      case 'hr_paragraphs.operation.contacts':
        if ($group->bundle() == 'operation') {
          $description = t('Find and connect with humanitarian organizations and key contacts in @label.', [
            '@label' => $group->label(),
          ]);
        }
        else {
          $description = t('Find and connect with humanitarian organizations and key contacts.');
        }
        break;

    }

    if (!empty($description)) {
      $metatags['description'] = $description;
    }
  }
}
