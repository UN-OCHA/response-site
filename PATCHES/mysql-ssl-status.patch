diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index bc4a360d4ae..4abcf362708 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -50,6 +50,15 @@ class Connection extends DatabaseConnection implements SupportsTemporaryTablesIn
    */
   private $serverVersion;
 
+  /**
+   * Stores connection info after it has been retrieved from the server, if SSL is enabled.
+   *
+   * @var string
+   *
+   * @see \Drupal\Core\Database\Driver\mysql\Connection::connectionInfo
+   */
+  private $serverConnectionInfo;
+
   /**
    * The minimal possible value for the max_allowed_packet setting of MySQL.
    *
@@ -248,6 +257,13 @@ public function version() {
     return $this->getServerVersion();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function connectionInfo() {
+    return $this->getServerConnectionInfo();
+  }
+
   /**
    * Determines whether the MySQL distribution is MariaDB or not.
    *
@@ -287,6 +303,19 @@ protected function getServerVersion(): string {
     return $this->serverVersion;
   }
 
+  /**
+   * Gets connection encryption information.
+   *
+   * @return string
+   *   The session SSL_CIPHER information.
+   */
+  protected function getServerConnectionInfo(): string {
+    if (!$this->serverConnectionInfo) {
+      $this->serverConnectionInfo = $this->query("SHOW SESSION STATUS LIKE 'SSL_CIPHER'")->fetchField(1);
+    }
+    return $this->serverConnectionInfo;
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 431651d08e2..52cbdca8616 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -569,6 +569,23 @@ function system_requirements($phase): array {
     }
   }
 
+  if ($phase === 'runtime' || $phase === 'update') {
+    // Test database SSL/TLS support.
+    $requirements['database_connection_encryption'] = [
+      'title'=> t('Database connection encryption'),
+      'severity' => RequirementSeverity::Warning,
+      'value' => t('Disabled'),
+      'description' => t('The database connection is not encrypted.'),
+    ];
+
+    // Check whether the database connection is encrypted and adjust the requirements array based on findings.
+    if (Database::getConnection()->connectionInfo()) {
+      $requirements['database_connection_encryption']['severity'] = RequirementSeverity::OK;
+      $requirements['database_connection_encryption']['value'] = t('Enabled');
+      $requirements['database_connection_encryption']['description'] = t('The database connection is encrypted with %connection.', ['%connection' => Database::getConnection()->connectionInfo() ]);
+    }
+  }
+
   if ($phase === 'runtime' || $phase === 'update') {
     // Test database JSON support.
     $requirements['database_support_json'] = [
